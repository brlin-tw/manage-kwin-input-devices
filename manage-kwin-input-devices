#!/usr/bin/env bash
# Manage disable/enable state of input devices under Kwin(works under KDE Wayland)
#
# Copyright 2025 Amine Hassane
# Copyright 2025 林博仁(Buo-ren Lin) <buo.ren.lin@gmail.com>
# SPDX-License-Identifier: MIT

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

QDBUS="${QDBUS:-qdbus}"
BUILTIN_DEVICES_TO_BE_MANAGED=(
    asus_numpad
    'ASUE140D:00 04F3:31B9 Touchpad'

    # Common name for laptop integrated keyboards
    'AT Translated Set 2 keyboard'

    # Touchpad of Framework Laptop 13 (AMD 7040 series and likely others)
    'PIXA3854:00 093A:0274 Touchpad'
)

if ! set -eEu; then
    printf 'Error: Unable to configure error handling.\n' 1>&2
    exit 2
fi

script_basecommand="${0}"
if test "${#}" -lt 1; then
    printf 'Usage: %s _operation_mode_ _operation_args_...\n' "${script_basecommand}" 1>&2
    exit 1
fi

# Query input device's sysfs name from it's display name
#
# Environment variables:
#
# * QDBUS: The qdbus-like external command to call
#
# Standard output: Sysfs name of the matched input device
# Supported return values:
#
# * 0: Matching device found
# * 1: Generic error
# * 2: No matching device found
get_input_device_sysfs_name(){
    local display_name="${1}"; shift

    local sysnames_raw
    if ! sysnames_raw="$(
        "${QDBUS:-qdbus}" \
            org.kde.KWin \
            /org/kde/KWin/InputDevice \
            org.freedesktop.DBus.Properties.Get \
            org.kde.KWin.InputDeviceManager \
            devicesSysNames
        )"; then
        printf 'Error: Unable to query the sysfs names of the kwin input devices.\n' 1>&2
        return 1
    fi

    if ! mapfile -t sysnames <<<"${sysnames_raw}"; then
        printf 'Error: Unable to load the sysnames array.\n' 1>&2
        return 1
    fi

    for sysname in "${sysnames[@]}"; do
        if ! name="$(
            "${QDBUS:-qdbus}" \
                org.kde.KWin \
                "/org/kde/KWin/InputDevice/${sysname}" \
                org.freedesktop.DBus.Properties.Get \
                org.kde.KWin.InputDevice \
                name
            )"; then
            printf \
                'Error: Unable to query the display name of the "%s" input device.\n' \
                "${sysname}" \
                1>&2
            return 1
        fi

        if test "${display_name}" == "${name}"; then
            # Matching device found
            echo "${sysname}"
            return 0
        fi
    done

    # No matching device found
    return 2
}

# List input devices managed by kwin
list_devices() {
    local sysnames_raw
    if ! sysnames_raw="$(
        "${QDBUS:-qdbus}" \
            org.kde.KWin \
            /org/kde/KWin/InputDevice \
            org.freedesktop.DBus.Properties.Get \
            org.kde.KWin.InputDeviceManager \
            devicesSysNames
        )"; then
        printf 'Error: Unable to query the sysfs names of the kwin input devices.\n' 1>&2
        return 1
    fi

    if ! mapfile -t sysnames <<<"${sysnames_raw}"; then
        printf 'Error: Unable to load the sysnames array.\n' 1>&2
        return 1
    fi

    local enabled
    printf 'enabled?\tsysfs name\t"display name"\n'
    for sysname in "${sysnames[@]}"; do
        if ! name="$(
            "${QDBUS:-qdbus}" \
                org.kde.KWin \
                "/org/kde/KWin/InputDevice/${sysname}" \
                org.freedesktop.DBus.Properties.Get \
                org.kde.KWin.InputDevice \
                name
            )"; then
            printf \
                'Error: Unable to query the display name of the "%s" input device.\n' \
                "${sysname}" \
                1>&2
            return 1
        fi

        if ! enabled="$(is_input_device_enabled "${sysname}")"; then
            printf 'Error: Unable to query the enabled status of the "%s" input device.' "${sysname}" 1>&2
            return 1
        fi

        # NOTE: The bash built-in printf doesn't not print pretty quoted strings, use the one from coreutils instead.
        env printf '%s\t\t%s\t\t%q\n' "${enabled}" "${sysname}" "${name}"
    done
}

# Determine whether the specified input device exists
#
# Standard output:
#
# * "true": The input device is enabled
# * "false": The input device is not enabled
#
# Return values:
#
# * 0: Operation successful
# * 2: Generic error
is_input_device_exists(){
    local device="${1}"; shift

    local sysfs_name
    if ! is_input_device_sysfs_name "${device}"; then
        if ! sysfs_name="$(get_input_device_sysfs_name "${device}")" \
            && test "${?}" -eq 1; then
            printf \
                'Error: Unable to query the sysfs name of the "%s" input device.\n' \
                "${device}" \
                1>&2
            return 2
        fi

        if test -z "${sysfs_name}"; then
            printf 'false\n'
            return 0
        else
            printf 'true\n'
            return 0
        fi
    else
        sysfs_name="${device}"

        local sysnames_raw
        if ! sysnames_raw="$(
            "${QDBUS:-qdbus}" \
                org.kde.KWin \
                /org/kde/KWin/InputDevice \
                org.freedesktop.DBus.Properties.Get \
                org.kde.KWin.InputDeviceManager \
                devicesSysNames
            )"; then
            printf 'Error: Unable to query the sysfs names of the kwin input devices.\n' 1>&2
            return 1
        fi

        if ! mapfile -t sysnames <<<"${sysnames_raw}"; then
            printf 'Error: Unable to load the sysnames array.\n' 1>&2
            return 1
        fi

        for name in "${sysnames[@]}"; do
            if test "${name}" == "${sysfs_name}"; then
                printf 'true\n'
                return 0
            fi
        done
        printf 'false\n'
        return 0
    fi
}

# Determine whether the specified input device is enabled
#
# Standard output:
#
# * "true": The input device is enabled
# * "false": The input device is not enabled
#
# Return values:
#
# * 0: Operation successful
# * 2: Generic error
is_input_device_enabled(){
    local device="${1}"; shift

    local sysfs_name
    if ! is_input_device_sysfs_name "${device}"; then
        if ! sysfs_name="$(get_input_device_sysfs_name "${device}")"; then
            printf \
                'Error: Unable to query the sysfs name of the "%s" input device.\n' \
                "${device}" \
                1>&2
            return 2
        fi
    else
        sysfs_name="${device}"
    fi

    local result
    if ! result="$(
        "${QDBUS:-qdbus}" \
            org.kde.KWin \
            "/org/kde/KWin/InputDevice/${sysfs_name}" \
            org.freedesktop.DBus.Properties.Get \
                org.kde.KWin.InputDevice \
                enabled
        )"; then
        printf \
            'Error: Unable to call the qdbus command to query the enabled status for the "%s" input device.\n' \
            "${device}" \
            1>&2
        return 2
    fi

    case "${result}" in
        true|false)
            # Result is the same so simply echo them
            printf '%s' "${result}"
        ;;
        *)
            printf \
                'Error: Unexpected output(%s) from the dbus call.\n' \
                "${result}" \
                1>&2
            return 2
        ;;
    esac
}

# Enable the specified input device if it's not enabled, and vice versa.
#
# Return values:
#
# * 0: Operation successful.
# * 2: Generic error.
toggle_device() {
    # The sysfs or display name of the input device to toggle the enabled status, e.g.: event2
    local device="${1}"; shift

    local enabled
    if ! enabled="$(is_input_device_enabled "${device}")"; then
        printf 'Error: Unable to query the enabled status of the "%s" input device.' "${device}" 1>&2
        return 2
    fi

    case "${enabled}" in
        true)
            if ! disable_device "${device}"; then
                printf \
                    'Error: Unable to disable the "%s" device.\n' \
                    "${device}" \
                    1>&2
                return 2
            fi
        ;;
        false)
            if ! enable_device "${device}"; then
                printf \
                    'Error: Unable to enable the "%s" device.\n' \
                    "${device}" \
                    1>&2
                return 2
            fi
        ;;
        *)
            printf \
                '%s: FATAL: Unsupported value of the enabled variable(%s)\n.' \
                "${FUNCNAME[0]}" \
                "${enabled}" \
                1>&2
            exit 99
        ;;
    esac
    return 0
}

# Determine whether the supplied string is a sysfs name of a input device
#
# Return values:
#
# * 0: Is sysfs name
# * 1: Not sysfs name
is_input_device_sysfs_name(){
    local device="${1}"; shift

    local regex_sysfs_names='^event[[:digit:]]+$'
    if [[ "${device}" =~ ${regex_sysfs_names} ]]; then
        return 0
    else
        return 1
    fi
}

# Enable a input device by its sysfs name or its display name
#
# Environment variables:
#
# * QDBUS: The qdbus-like command to use.
#
# Return values:
#
# * 0: Operation successful
# * 2: Generic error
enable_device(){
    local device="${1}"; shift

    printf \
        'Info: Enabling the "%s" input device...\n' \
        "${device}"
    if ! is_input_device_sysfs_name "${device}"; then
        if ! sysfs_name="$(get_input_device_sysfs_name "${device}")"; then
            printf \
                'Error: Unable to query the sysfs name of the "%s" input device.\n' \
                "${device}" \
                1>&2
            return 2
        fi
    else
        sysfs_name="${device}"
    fi

    if ! "${QDBUS:-qdbus}" \
        org.kde.KWin \
        "/org/kde/KWin/InputDevice/${sysfs_name}" \
        org.freedesktop.DBus.Properties.Set \
            org.kde.KWin.InputDevice \
            enabled \
            true; then
        printf \
            'Error: Unable to enable the "%s" input device.\n' \
            "${device}" \
            1>&2
        return 2
    fi

    return 0
}

# Disable a input device by its sysfs name or its display name
#
# Environment variables:
#
# * QDBUS: The qdbus-like command to use.
#
# Return values:
#
# * 0: Operation successful
# * 2: Generic error
disable_device(){
    local device="${1}"; shift

    printf \
        'Info: Disabling the "%s" input device...\n' \
        "${device}"
    if ! is_input_device_sysfs_name "${device}"; then
        if ! sysfs_name="$(get_input_device_sysfs_name "${device}")"; then
            printf \
                'Error: Unable to query the sysfs name of the "%s" input device.\n' \
                "${device}" \
                1>&2
            return 2
        fi
    else
        sysfs_name="${device}"
    fi

    if ! "${QDBUS:-qdbus}" \
        org.kde.KWin \
        "/org/kde/KWin/InputDevice/${sysfs_name}" \
        org.freedesktop.DBus.Properties.Set \
            org.kde.KWin.InputDevice \
            enabled \
            false; then
        printf \
            'Error: Unable to disable the "%s" input device.\n' \
            "${device}" \
            1>&2
        return 2
    fi

    return 0
}

operation_mode="${1}"; shift 1
case "${operation_mode}" in
    enable)
        if test "${#}" -eq 0; then
            printf \
                'Usage: %s enable _input_device_...\n' \
                "${script_basecommand}" \
                1>&2
            printf \
                '\n_input_device_ can be its sysfs name or display name.\n' \
                1>&2
            exit 1
        fi

        devices=("${@}")
        for device in "${devices[@]}"; do
            if ! enable_device "${device}"; then
                printf \
                    'Error: Unable to enable the "%s" input device.\n' \
                    "${device}" \
                    1>&2
                exit 2
            fi
        done
    ;;
    disable)
        if test "${#}" -eq 0; then
            printf \
                'Usage: %s disable _input_device_...\n' \
                "${script_basecommand}" \
                1>&2
            printf \
                '\n_input_device_ can be its sysfs name or display name.\n' \
                1>&2
            exit 1
        fi

        devices=("${@}")
        for device in "${devices[@]}"; do
            if ! disable_device "${device}"; then
                printf \
                    'Error: Unable to disable the "%s" input device.\n' \
                    "${device}" \
                    1>&2
                exit 2
            fi
        done
    ;;
    enable-from-file|disable-from-file|toggle-from-file)
        if test "${#}" != 1; then
            printf \
                'Usage: %s %s [_device_list_file_|"_builtin_"]\n' \
                "${script_basecommand}" \
                "${operation_mode}" \
                1>&2
            printf \
                '\nReplace the _device_list_file_ placeholder text to the actual path of the file with the list of devices to be managed, or specify "_builtin_" (literally), to use a built-in list with common values.\n' \
                1>&2
            exit 1
        fi

        devices=()
        list_file="${1}"; shift 1
        if test "${list_file}" == _builtin_; then
            devices+=("${BUILTIN_DEVICES_TO_BE_MANAGED[@]}")
        else
            if ! test -e "${list_file}"; then
                printf \
                    'Error: List file "%s" not found.\n' \
                    "${list_file}" \
                    1>&2
                exit 1
            fi

            if ! mapfile -t list_file_lines <"${list_file}"; then
                printf \
                    'Error: Unable to load the list file.\n' \
                    1>&2
                exit 2
            fi

            regex_comment_lines='^#'
            regex_blank_lines='^[[:space:]]*$'
            for line in "${list_file_lines[@]}"; do
                if [[ "${line}" =~ ${regex_comment_lines} ]] \
                    || [[ "${line}" =~ ${regex_blank_lines} ]]; then
                    continue
                fi
                devices+=("${line}")
            done
        fi

        for device in "${devices[@]}"; do
            if ! device_existence="$(is_input_device_exists "${device}")"; then
                printf \
                    'Error: Unable to check the existence of the "%s" input device.\n' \
                    "${device}" \
                    1>&2
                exit 2
            fi

            if test "${device_existence}" == false; then
                # We don't bail out when device in list doesn't exist as it'll contain device names that don't exist in every system.
                continue
            fi

            case "${operation_mode}" in
                enable-from-file)
                    if ! enable_device "${device}"; then
                        printf \
                            'Error: Unable to enable the "%s" input device.\n' \
                            "${device}" \
                            1>&2
                        exit 2
                    fi
                ;;
                disable-from-file)
                    if ! disable_device "${device}"; then
                        printf \
                            'Error: Unable to disable the "%s" input device.\n' \
                            "${device}" \
                            1>&2
                        exit 2
                    fi
                ;;
                toggle-from-file)
                    if ! toggle_device "${device}"; then
                        printf \
                            'Error: Unable to toggle the enabled state of the "%s" input device.\n' \
                            "${device}" \
                            1>&2
                        exit 2
                    fi
                ;;
                *)
                    printf \
                        'FATAL: Unsupported operation mode "%s".\n' \
                        "${operation_mode}" \
                        1>&2
                    exit 99
                ;;
            esac
        done
    ;;
    toggle)
        if test "${#}" -eq 0; then
            printf \
                'Usage: %s toggle _input_device_...\n' \
                "${script_basecommand}" \
                1>&2
            printf \
                '\n_input_device_ can be its sysfs name or display name.\n' \
                1>&2
            exit 1
        fi

        devices=("${@}")
        for device in "${devices[@]}"; do
            if ! toggle_device "${device}"; then
                printf \
                    'Error: Unable to toggle the enabled state the "%s" input device.\n' \
                    "${device}" \
                    1>&2
                exit 2
            fi
        done
    ;;
    # Display enabled status for specified input device(s)
    status)
        if test "${#}" -eq 0; then
            printf \
                'Usage: %s status _input_device_...\n' \
                "${script_basecommand}" \
                1>&2
            printf \
                '\n_input_device_ can be its sysfs name or display name.\n' \
                1>&2
            exit 1
        fi

        enabled=
        devices=("${@}")
        if test "${#devices[@]}" -eq 1; then
            device="${devices[0]}"
            if ! enabled="$(is_input_device_enabled "${device}")"; then
                printf 'Error: Unable to query the enabled status of the "%s" input device.\n' "${device}" 1>&2
                exit 2
            fi

            # We only print [enabled|disabled] when only one device is specified for the ease of scripting
            if test "${enabled}" == true; then
                printf 'disabled\n'
            else
                printf 'enabled\n'
            fi
        else
            for device in "${devices[@]}"; do
                if ! enabled="$(is_input_device_enabled "${device}")"; then
                    printf 'Error: Unable to query the enabled status of the "%s" input device.\n' "${device}" 1>&2
                    exit 2
                fi

                if ! enabled="$(is_input_device_enabled "${device}")"; then
                    state=disabled
                else
                    state=enabled
                fi

                printf '%s: %s\n' "${device}" "${state}"
            done
        fi
    ;;
    list)
        if ! list_devices; then
            printf \
                'Error: Unable to list kwin-managed input devices.\n' \
                1>&2
            exit 2
        fi
    ;;
    *)
        printf 'Error: Unsupported operation mode "%s".\n' "${operation_mode}" 1>&2
        exit 1
    ;;
esac

# We really want that output to be parsed easily
if test "${operation_mode}" != status; then
    printf 'Info: Operation completed without errors.\n'
fi
